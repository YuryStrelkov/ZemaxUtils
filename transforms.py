import math

from Geometry import Matrix4, Quaternion, Vector3

transforms = [Matrix4(0.3277719535, -0.8386705679, 0.4349680735, 0.0,
                      0.7986355100, 0.0000000000, -0.6018150232, 0.0,
                      0.5047245473, 0.5446390350, 0.6697920968, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(-0.3277719535, -0.8386705679, 0.4349680735, 0.0,
                      0.7986355100, 0.0000000000, 0.6018150232, 0.0,
                      -0.5047245472, 0.5446390350, 0.6697920968, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(0.0000000000, -0.8191520443, -0.5735764364, 0.0,
                      -1.0000000000, 0.0000000000, 0.0000000000, 0.0,
                      0.0000000000, 0.5735764364, -0.8191520443, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(-0.7986355100, 0.0000000000, -0.6018150232, 0.0,
                      -0.7986355100, 0.0000000000, -0.6018150232, 0.0,
                      -0.5047245472, 0.5446390350, 0.6697920968, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(0.3277719535, 0.7986355100, 0.5047245473, 0.0,
                      -0.8386705679, 0.0000000000, 0.5446390350, 0.0,
                      0.4349680735, -0.6018150232, 0.6697920968, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(-0.3277719535, 0.7986355100, -0.5047245472, 0.0,
                      -0.8386705679, 0.0000000000, 0.5446390350, 0.0,
                      0.4349680735, 0.6018150232, 0.6697920968, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(0.0000000000, -1.0000000000, 0.0000000000, 0.0,
                      -0.8191520443, 0.0000000000, 0.5735764364, 0.0,
                      -0.5735764364, 0.0000000000, -0.8191520443, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(-0.7986355100, -0.7986355100, -0.5047245472, 0.0,
                      0.0000000000, 0.0000000000, 0.5446390350, 0.0,
                      -0.6018150232, -0.6018150232, 0.6697920968, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(0.9426414911, 0.0000000000, 0.3338068592, 0.0,
                      0.0000000000, 1.0000000000, 0.0000000000, 0.0,
                      -0.3338068592, 0.0000000000, 0.9426414911, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(0.9426414911, 0.0000000000, -0.3338068592, 0.0,
                      0.0000000000, 1.0000000000, 0.0000000000, 0.0,
                      0.3338068592, 0.0000000000, 0.9426414911, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(0.9426414911, 0.0000000000, -0.3338068592, 0.0,
                      0.0000000000, 1.0000000000, 0.0000000000, 0.0,
                      0.3338068592, 0.0000000000, 0.9426414911, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(0.9426414911, 0.0000000000, 0.3338068592, 0.0,
                      0.0000000000, 1.0000000000, 0.0000000000, 0.0,
                      -0.3338068592, 0.0000000000, 0.9426414911, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(0.9999999848, 0.0000000000, -0.0001745329, 0.0,
                      0.0000000000, 1.0000000000, 0.0000000000, 0.0,
                      0.0001745329, 0.0000000000, 0.9999999848, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(0.9999999848, 0.0000000000, 0.0001745329, 0.0,
                      0.0000000000, 1.0000000000, 0.0000000000, 0.0,
                      -0.0001745329, 0.0000000000, 0.9999999848, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(1.0000000000, 0.0000000000, 0.0000000000, 0.0,
                      0.0000000000, 0.9999999391, 0.0003490658, 0.0,
                      0.0000000000, -0.0003490658, 0.9999999391, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(1.0000000000, 0.0000000000, 0.0000000000, 0.0,
                      0.0000000000, 0.9999999391, -0.0003490658, 0.0,
                      0.0000000000, 0.0003490658, 0.9999999391, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(0.9999999848, 0.0000000000, 0.0001745329, 0.0,
                      0.0000000000, 1.0000000000, 0.0000000000, 0.0,
                      -0.0001745329, 0.0000000000, 0.9999999848, 0.0,
                      0.0, 0.0, 0.0, 1.0),
              Matrix4(0.9999999848, 0.0000000000, 0.0001745329, 0.0,
                      0.0000000000, 1.0000000000, 0.0000000000, 0.0,
                      -0.0001745329, 0.0000000000, 0.9999999848, 0.0,
                      0.0, 0.0, 0.0, 1.0)]

# q12, q13, q16, q17

with open('quaternions.txt', 'wt') as file:
    # print(f'{f"#q":^5}|{"w":^12}|{"x":^12}|{"y":^10}|{"z" : ^12}', file=file)
    print(f'{f"#q":<5}|{"w":^15}|{"x":^15}|{"y":^15}|{"z" : ^15}', file=file)

    for i, t in enumerate(transforms):
        q = Quaternion.from_rotation_matrix(t)
        print(q)
        # print(f'{q.ew:>15.12f} {q.ex:>15.12f} {q.ey:>15.12f} {q.ez : >15.12f}', file=file)
        print(f'{f"q{i}":<5} {q.ew:>15.12f} {q.ex:>15.12f} {q.ey:>15.12f} {q.ez : >15.12f}', file=file)

angles1 = Vector3(0.0000001, 90.0000000, 90.0000001)
angles2 = Vector3(90.0000000, 0.0000000, 90.0000000)
angles3 = Vector3(89.9999999, 90.0000000, 0.0000001)

# angles1 = Vector3(0.0000000,  90.0000000,  90.000000)
# angles2 = Vector3(90.0000000, -0.0000001, 90.0000001)
# angles3 = Vector3(90.0000000, 89.9999999, -0.0000001)

rot1 = Matrix4.rotate_xyz(*angles1, False)
rot2 = Matrix4.rotate_xyz(*angles2, False)
rot3 = Matrix4.rotate_xyz(*angles3, False)
print(rot1)
print(rot2)
print(rot3)

q_1 = Quaternion.from_euler_angles(*(angles1 * math.pi / 180.0))
q_2 = Quaternion.from_euler_angles(*(angles2 * math.pi / 180.0))
q_3 = Quaternion.from_euler_angles(*(angles3 * math.pi / 180.0))
print(f'{q_1.ew:>15.12f} {q_1.ex:>15.12f} {q_1.ey:>15.12f} {q_1.ez : >15.12f}')
print(f'{q_2.ew:>15.12f} {q_2.ex:>15.12f} {q_2.ey:>15.12f} {q_2.ez : >15.12f}')
print(f'{q_3.ew:>15.12f} {q_3.ex:>15.12f} {q_3.ey:>15.12f} {q_3.ez : >15.12f}')


v_1 = Vector3(*(math.cos(v * math.pi / 180.0) for v in angles1))
v_2 = Vector3(*(math.cos(v * math.pi / 180.0) for v in angles2))
v_3 = Vector3(*(math.cos(v * math.pi / 180.0) for v in angles3))
print(v_1)
print(v_2)
print(v_3)
basis = Matrix4(v_1.x, v_2.x, v_3.x, 0.0,
                v_1.y, v_2.y, v_3.y, 0.0,
                v_1.z, v_2.z, v_3.z, 0.0,
                0.0, 0.0, 0.0, 1.0)

print(Vector3.dot(v_1, v_2))
print(Vector3.dot(v_1, v_3))
print(Vector3.dot(v_2, v_3))

print(basis)
q_0 = Quaternion.from_rotation_matrix(basis)
print(f'{q_0.ew:>15.64f} {q_0.ex:>15.64f} {q_0.ey:>15.64f} {q_0.ez : >15.64f}')
